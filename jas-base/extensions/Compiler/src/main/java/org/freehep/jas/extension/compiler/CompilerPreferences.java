package org.freehep.jas.extension.compiler;

import java.io.File;
import javax.swing.JFileChooser;
import org.freehep.swing.JDirectoryChooser;

/**
 *
 * @author tonyj
 * @version $Id: CompilerPreferences.java 13884 2011-09-20 23:10:19Z tonyj $
 */
class CompilerPreferences extends javax.swing.JPanel
{
   private CompilerPlugin plugin;
   /** Creates new form CompilerPreferences */
   public CompilerPreferences(CompilerPlugin plugin)
   {
      this.plugin = plugin;
      initComponents();
      useBuiltInActionPerformed(null);
      redirectStateChanged(null);
      dir = plugin.getOutputDirectory();
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   private void initComponents()//GEN-BEGIN:initComponents
   {
      java.awt.GridBagConstraints gridBagConstraints;
      javax.swing.JPanel jPanel1;
      javax.swing.JPanel jPanel2;

      useBuiltIn = new javax.swing.JCheckBox();
      jPanel2 = new javax.swing.JPanel();
      compilerLabel = new javax.swing.JLabel();
      compilerCommand = new javax.swing.JTextField();
      browseButton = new javax.swing.JButton();
      clear = new javax.swing.JCheckBox();
      jPanel1 = new javax.swing.JPanel();
      redirect = new javax.swing.JCheckBox();
      directory = new javax.swing.JButton();
      autoSave = new javax.swing.JCheckBox();

      setLayout(new java.awt.GridBagLayout());

      useBuiltIn.setMnemonic('B');
      useBuiltIn.setSelected(plugin.isUseBuiltInCompiler());
      useBuiltIn.setText("Use built-in compiler");
      useBuiltIn.setEnabled(plugin.isBuiltInCompilerAvailable());
      useBuiltIn.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            useBuiltInActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      add(useBuiltIn, gridBagConstraints);

      jPanel2.setLayout(new java.awt.GridBagLayout());

      jPanel2.setBorder(new javax.swing.border.TitledBorder("External Compiler"));
      compilerLabel.setText("Compiler: ");
      jPanel2.add(compilerLabel, new java.awt.GridBagConstraints());

      compilerCommand.setText(plugin.getCompilerCommand());
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      jPanel2.add(compilerCommand, gridBagConstraints);

      browseButton.setText("Browse...");
      browseButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            browseButtonActionPerformed(evt);
         }
      });

      jPanel2.add(browseButton, new java.awt.GridBagConstraints());

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      add(jPanel2, gridBagConstraints);

      clear.setMnemonic('C');
      clear.setSelected(plugin.isClearConsole());
      clear.setText("Clear console before compilation");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      add(clear, gridBagConstraints);

      jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

      redirect.setMnemonic('R');
      redirect.setSelected(plugin.isRedirectOutput());
      redirect.setText("Redirect output to: ");
      redirect.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            redirectStateChanged(evt);
         }
      });

      jPanel1.add(redirect);

      directory.setMnemonic('D');
      directory.setText("Directory...");
      directory.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            directoryActionPerformed(evt);
         }
      });

      jPanel1.add(directory);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      add(jPanel1, gridBagConstraints);

      autoSave.setSelected(plugin.isSaveBeforeCompiling());
      autoSave.setText("Save file before compiling");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      add(autoSave, gridBagConstraints);

   }//GEN-END:initComponents

   private void browseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseButtonActionPerformed
   {//GEN-HEADEREND:event_browseButtonActionPerformed
      JFileChooser chooser = new JFileChooser();
      chooser.setDialogTitle("Select Java compiler");
      chooser.setApproveButtonMnemonic('S');
      chooser.setDialogType(chooser.CUSTOM_DIALOG);
      int rc = chooser.showDialog(this, "Select");
      if (rc == chooser.APPROVE_OPTION)
      {
         compilerCommand.setText(chooser.getSelectedFile().getAbsolutePath());
      }
   }//GEN-LAST:event_browseButtonActionPerformed

   private void directoryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_directoryActionPerformed
   {//GEN-HEADEREND:event_directoryActionPerformed
      JDirectoryChooser chooser = new JDirectoryChooser(dir);
      chooser.setFileSelectionMode(chooser.DIRECTORIES_ONLY);
      chooser.setFileHidingEnabled(false);
      int rc = chooser.showDialog(this);
      if (rc == chooser.APPROVE_OPTION) dir = chooser.getSelectedFile();
   }//GEN-LAST:event_directoryActionPerformed

   private void redirectStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_redirectStateChanged
   {//GEN-HEADEREND:event_redirectStateChanged
      directory.setEnabled(redirect.isSelected());
   }//GEN-LAST:event_redirectStateChanged

   private void useBuiltInActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_useBuiltInActionPerformed
   {//GEN-HEADEREND:event_useBuiltInActionPerformed
      boolean enable = !useBuiltIn.isSelected();
      compilerLabel.setEnabled(enable);
      compilerCommand.setEnabled(enable);
      browseButton.setEnabled(enable);
   }//GEN-LAST:event_useBuiltInActionPerformed
   boolean apply()
   {
      plugin.setClearConsole(clear.isSelected());
      plugin.setSaveBeforeCompiling(autoSave.isSelected());
      plugin.setUseBuiltInCompiler(useBuiltIn.isSelected());
      plugin.setCompilerCommand(compilerCommand.getText());
      plugin.setRedirectOutput(redirect.isSelected());
      plugin.setOutputDirectory(dir);
      return true;
   }
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JCheckBox autoSave;
   private javax.swing.JButton browseButton;
   private javax.swing.JCheckBox clear;
   private javax.swing.JTextField compilerCommand;
   private javax.swing.JLabel compilerLabel;
   private javax.swing.JButton directory;
   private javax.swing.JCheckBox redirect;
   private javax.swing.JCheckBox useBuiltIn;
   // End of variables declaration//GEN-END:variables
   private File dir;
}
