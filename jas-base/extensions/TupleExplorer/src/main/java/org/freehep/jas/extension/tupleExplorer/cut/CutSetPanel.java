package org.freehep.jas.extension.tupleExplorer.cut;

import java.awt.BorderLayout;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.freehep.jas.extension.tupleExplorer.cut.CutDialog;
import org.freehep.jas.extension.tupleExplorer.cut.CutSet;
import org.freehep.jas.extension.tupleExplorer.mutableTuple.MutableTupleTree;


/**
 *
 * @author tonyj
 * @version $Id: CutSetPanel.java 13893 2011-09-28 23:42:34Z tonyj $
 */
public class CutSetPanel extends javax.swing.JPanel {
   
   private CutSet cutSet;
   private MutableTupleTree tuple;

    /**
     * Create a new CutSetPanel
     * @param cutSet the CutSet from represented by this panel
     * @param tuple the TreeTuple that this cutset is applied to
     *
     */
    public CutSetPanel( CutSet cutSet, MutableTupleTree tuple )
    {
	this.cutSet = cutSet;
	this.tuple = tuple;
	initComponents();
	detailsActionPerformed(null);
    }

    /**
     * Create the CutSetPanel
     * @return the JPanel for the CutSet
     *
     */
    private JPanel createCutPanel()
    {
	final JPanel cutPanel = new JPanel();
	cutPanel.setLayout( new BoxLayout( cutPanel, BoxLayout.Y_AXIS ) );
	for (int i = 0; i < cutSet.getNCuts(); i++ ) {
	    Cut cut = cutSet.getCut(i);
	    JPanel p = createCutWrapper( cut );
	    cutPanel.add(p);      
	}

	ListDataListener dataListener = new ListDataListener() {
		public void intervalAdded(ListDataEvent listDataEvent)
		{  
		    for (int i = listDataEvent.getIndex0(); i <= listDataEvent.getIndex1(); i++ )
			{
			    Cut cut = cutSet.getCut(i);
			    JPanel p = createCutWrapper( cut );
			    cutPanel.add( p, i );
			    cutPanel.revalidate();
			}
		}

		public void intervalRemoved(ListDataEvent listDataEvent)
		{
		    for (int i = listDataEvent.getIndex0(); i <= listDataEvent.getIndex1(); i++ )
			{
			    cutPanel.remove(i);   
			    cutPanel.revalidate();
			}
		}
		public void contentsChanged(ListDataEvent listDataEvent)
		{
		}
	    };
	cutSet.addListDataListener( dataListener);

	JPanel spacer = new JPanel( new BorderLayout() );
	spacer.add( cutPanel, BorderLayout.NORTH );
	return spacer;
    }
    
    /**
     * Create a JPanel wrapper for e given Cut
     * @param cut the Cut to be wrapped in a JPanel
     * @return the JPanel wrapping the Cut
     *
     */
    private JPanel createCutWrapper( Cut cut )
    {
	JPanel p = new JPanel( new BorderLayout() );
	JComponent cp = CutDialog.createPanel( cut, tuple );
	cp.setBorder( BorderFactory.createTitledBorder( cut.getName() ) );
	p.add( cp, BorderLayout.CENTER );
	
	Box b = Box.createVerticalBox();
	JCheckBox disable = new JCheckBox("Disable "+cut.getName());
	disable.getInsets().bottom = 0;
	JCheckBox invert = new JCheckBox("Invert "+cut.getName());
	invert.getInsets().top = 0;
	int state = cutSet.getCutState(cut);
	disable.setSelected(state==cutSet.CUT_DISABLED);
	invert.setSelected(state==cutSet.CUT_INVERTED);
	invert.setEnabled(state!=cutSet.CUT_DISABLED);
	ActionListener al = new CutEnabler(cutSet,cut,disable,invert);
	disable.addActionListener(al);
	invert.addActionListener(al);
	b.add(b.createVerticalGlue());
	b.add(disable);
	b.add(invert);
	b.add(b.createVerticalGlue());
	p.add(b,BorderLayout.EAST);
	return p;
    }
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        details = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        add = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        cutScroll = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        details.setText("Show Cut Details");
        details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailsActionPerformed(evt);
            }
        });

        jPanel1.add(details, java.awt.BorderLayout.WEST);

        add.setText("Add...");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jPanel2.add(add);

        remove.setText("Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        jPanel2.add(remove);

        newButton.setText("New...");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        jPanel2.add(newButton);

        jPanel1.add(jPanel2, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        add(cutScroll, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newButtonActionPerformed
    {//GEN-HEADEREND:event_newButtonActionPerformed
	Window frame = (Window) SwingUtilities.getAncestorOfClass(Window.class,this); 
	AddCutDialog dlg;
	if   ( frame instanceof Dialog ) dlg = new AddCutDialog( (Dialog) frame, tuple, false );
	else dlg = new AddCutDialog( (Frame) frame, tuple , false);
	dlg.pack();
	dlg.setLocationRelativeTo(this);
	dlg.setVisible(true);
	Cut cut = dlg.getCut();
	if (cut != null) cutSet.addCut(cut);
    }//GEN-LAST:event_newButtonActionPerformed
    
    private void removeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeActionPerformed
    {//GEN-HEADEREND:event_removeActionPerformed
	int[] rows = table.getSelectedRows();
	java.util.List cutsToBeRemoved = new ArrayList();
	for (int i=0; i<rows.length; i++) cutsToBeRemoved.add(cutSet.getCut(rows[i]));
	for (int i=0; i<cutsToBeRemoved.size(); i++) cutSet.removeCut((Cut) cutsToBeRemoved.get(i));
    }//GEN-LAST:event_removeActionPerformed
    
    private void addActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addActionPerformed
    {//GEN-HEADEREND:event_addActionPerformed
	CutSet all = tuple.allCuts();
	Vector eligible = new Vector();
	for (int i=0; i<all.getNCuts(); i++)
	    {
		Cut cut = all.getCut(i);
		if (cutSet.contains(cut,false)) continue;
		
		if (cut instanceof CutSet && ((CutSet) cut).contains(cutSet,true)) continue;
		
		if ( cutSet == cut ) continue;
		eligible.add(cut);
	    }
	Window parent = (Window) SwingUtilities.getAncestorOfClass(Window.class,this); 
	AddCutToCutSetDialog dlg;
	if   ( parent instanceof Dialog ) dlg = new AddCutToCutSetDialog( (Dialog) parent, eligible );
	else dlg = new AddCutToCutSetDialog( (Frame) parent, eligible );
	dlg.pack();
	dlg.setLocationRelativeTo(this);
	dlg.setVisible(true);
	if (dlg.getSelectedCut() != null) cutSet.addCut(dlg.getSelectedCut());
    }//GEN-LAST:event_addActionPerformed
    
    private void detailsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_detailsActionPerformed
    {//GEN-HEADEREND:event_detailsActionPerformed
	if (details.isSelected())
	    {
		cutScroll.setViewportView(createCutPanel());
	    }
	else
	    {
		table = new JTable(new CutSetTable(cutSet));
		cutScroll.setViewportView(table);
		table.getSelectionModel().addListSelectionListener(new ListSelectionListener()
		    {
			public void valueChanged(ListSelectionEvent e)
			{
			    remove.setEnabled(table.getSelectedRowCount()>0);
			}
		    });
	    }
	remove.setEnabled(false);
    }//GEN-LAST:event_detailsActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JScrollPane cutScroll;
    private javax.swing.JCheckBox details;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton newButton;
    private javax.swing.JButton remove;
    // End of variables declaration//GEN-END:variables
    private JTable table;
    
    private static class CutEnabler implements ActionListener
    {
	CutEnabler(CutSet cutSet, Cut cut, JCheckBox disable, JCheckBox invert)
	{
	    this.cutSet = cutSet;
	    this.cut = cut;
	    this.disable = disable;
	    this.invert = invert;
	}
	public void actionPerformed(ActionEvent actionEvent)
	{
	    int state;
	    if (disable.isSelected()) state = cutSet.CUT_DISABLED;
	    else if (invert.isSelected()) state = cutSet.CUT_INVERTED;
	    else state = cutSet.CUT_ENABLED;
	    cutSet.setCutState(cut,state);
	    invert.setEnabled(state!=cutSet.CUT_DISABLED);
	}
	private CutSet cutSet;
	private Cut cut;
	private JCheckBox disable;
	private JCheckBox invert;
    }    
}
