package org.freehep.jas.extensions.text.gui;

import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import org.freehep.jas.extensions.text.core.LineSource;
import org.freehep.jas.extensions.text.core.TextMetaData;
import org.freehep.swing.wizard.HasNextPages;
import org.freehep.swing.wizard.WizardPage;

/**
 *
 * @author Tony Johnson
 */
public class FirstPage extends WizardPage implements HasNextPages
{
   
   /** Creates new form FirstPage */
   public FirstPage()
   {
      initComponents();
   }
   void setData(GUIUtilities util)
   {
      this.util = util;
      this.meta = util.getMetaData();
            
      isAdjusting = true;
      LineSource preview = util.getPreview();
      if (meta.hasCommentsInFile()) preview.setLineComment(meta.getCommentDelimiter());
      previewModel = new FilePreviewModel(util.getPreview());
      jTable1.setModel(previewModel);
      JTable rowHeader = new JTable(previewModel);
      TableCellRenderer renderer = new RowHeaderRenderer();
      
      Component comp = renderer.getTableCellRendererComponent(rowHeader, null, false, false, rowHeader.getRowCount()-1, 0);
      
      rowHeader.setIntercellSpacing(new Dimension(0, 0));
      Dimension d = rowHeader.getPreferredScrollableViewportSize();
      d.width = comp.getPreferredSize().width;
      rowHeader.setPreferredScrollableViewportSize(d);
      rowHeader.setRowHeight(jTable1.getRowHeight());
      rowHeader.setDefaultRenderer(Object.class, renderer);
      
      jScrollPane1.setRowHeaderView(rowHeader);
      
      jRadioButton1.setSelected(meta.getDataType() == meta.DELIMITED);
      jRadioButton2.setSelected(meta.getDataType() == meta.FIXED);
      
      jTextField1.setText(meta.getCommentDelimiter());
      jCheckBox2.setSelected(meta.hasCommentsInFile());
      jTextField1.setEnabled(meta.hasCommentsInFile());
      
      jCheckBox1.setSelected(meta.hasColumnHeadersInFile());
      model2.setMinimum(new Integer(1));
      model2.setMaximum(new Integer(rowHeader.getRowCount()));
      model2.setValue(new Integer(meta.getColumnHeaderRow()));
      
      model1.setMinimum(new Integer(meta.hasColumnHeadersInFile() ? meta.getColumnHeaderRow()+1 : 1));
      model1.setMaximum(new Integer(rowHeader.getRowCount()));
      model1.setValue(new Integer(meta.getFirstDataRow()));
      jSpinner2.setEnabled(meta.hasColumnHeadersInFile());
      
      SpinnerNumberModel model2 = new SpinnerNumberModel(meta.getFirstDataRow(),1,rowHeader.getRowCount(),1);
      isAdjusting = false;
   }
   
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   private void initComponents()//GEN-BEGIN:initComponents
   {
      java.awt.GridBagConstraints gridBagConstraints;

      buttonGroup1 = new javax.swing.ButtonGroup();
      meta = null;
      jPanel1 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jLabel2 = new javax.swing.JLabel();
      jRadioButton2 = new javax.swing.JRadioButton();
      jLabel3 = new javax.swing.JLabel();
      jPanel4 = new javax.swing.JPanel();
      jCheckBox2 = new javax.swing.JCheckBox();
      jTextField1 = new javax.swing.JTextField();
      jLabel6 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      jCheckBox1 = new javax.swing.JCheckBox();
      jSpinner2 = new javax.swing.JSpinner();
      jLabel4 = new javax.swing.JLabel();
      jSpinner1 = new javax.swing.JSpinner();
      jPanel3 = new javax.swing.JPanel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jTable1 = new PreviewTable();

      setLayout(new java.awt.GridBagLayout());

      setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10)));
      jPanel1.setLayout(new java.awt.GridBagLayout());

      jPanel1.setBorder(new javax.swing.border.TitledBorder("File type"));
      jLabel1.setText("Choose the file type that best describes your data:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(jLabel1, gridBagConstraints);

      jRadioButton1.setMnemonic('D');
      jRadioButton1.setText("Delimited");
      buttonGroup1.add(jRadioButton1);
      jRadioButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jRadioButton1ActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      jPanel1.add(jRadioButton1, gridBagConstraints);

      jLabel2.setLabelFor(jRadioButton1);
      jLabel2.setText("- Characters such as comma or tab separate each field.");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(jLabel2, gridBagConstraints);

      jRadioButton2.setMnemonic('F');
      jRadioButton2.setText("Fixed width");
      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setEnabled(false);
      jRadioButton2.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jRadioButton2ActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      jPanel1.add(jRadioButton2, gridBagConstraints);

      jLabel3.setLabelFor(jRadioButton2);
      jLabel3.setText("- Fields are aligned in columns with spaces between each field.");
      jLabel3.setEnabled(false);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(jLabel3, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      add(jPanel1, gridBagConstraints);

      jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

      jPanel4.setBorder(new javax.swing.border.TitledBorder("Comments"));
      jCheckBox2.setMnemonic('L');
      jCheckBox2.setText("Lines beginning");
      jCheckBox2.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jCheckBox2ActionPerformed(evt);
         }
      });

      jPanel4.add(jCheckBox2);

      jTextField1.setColumns(2);
      jTextField1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jTextField1ActionPerformed(evt);
         }
      });

      jPanel4.add(jTextField1);

      jLabel6.setLabelFor(jTextField1);
      jLabel6.setText("should be ignored.");
      jPanel4.add(jLabel6);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 0.5;
      add(jPanel4, gridBagConstraints);

      jPanel2.setLayout(new java.awt.GridBagLayout());

      jPanel2.setBorder(new javax.swing.border.TitledBorder("File rows"));
      jCheckBox1.setMnemonic('C');
      jCheckBox1.setText("Column labels in row:");
      jCheckBox1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jCheckBox1ActionPerformed(evt);
         }
      });

      jPanel2.add(jCheckBox1, new java.awt.GridBagConstraints());

      jSpinner2.setModel(model2);
      jSpinner2.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            jSpinner2StateChanged(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      jPanel2.add(jSpinner2, gridBagConstraints);

      jLabel4.setDisplayedMnemonic('r');
      jLabel4.setLabelFor(jSpinner2);
      jLabel4.setText("Data starts at row:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      jPanel2.add(jLabel4, gridBagConstraints);

      jSpinner1.setModel(model1);
      jSpinner1.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            jSpinner1StateChanged(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      jPanel2.add(jSpinner1, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 0.5;
      add(jPanel2, gridBagConstraints);

      jPanel3.setLayout(new java.awt.BorderLayout());

      jPanel3.setBorder(new javax.swing.border.TitledBorder("File Preview"));
      jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 150));
      jScrollPane1.setViewportView(jTable1);

      jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.weighty = 1.0;
      add(jPanel3, gridBagConstraints);

   }//GEN-END:initComponents

   private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSpinner1StateChanged
   {//GEN-HEADEREND:event_jSpinner1StateChanged
      if (!isAdjusting) meta.setFirstDataRow(((Number) model1.getValue()).intValue());
   }//GEN-LAST:event_jSpinner1StateChanged

   private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSpinner2StateChanged
   {//GEN-HEADEREND:event_jSpinner2StateChanged
      if (!isAdjusting)
      {
         int n = ((Number) model2.getValue()).intValue();
         meta.setColumnHeaderRow(n);
         model1.setMinimum(new Integer(n+1));
         if (model1.getMinimum().compareTo(model1.getValue())>0) model1.setValue(new Integer(n+1));
      }
   }//GEN-LAST:event_jSpinner2StateChanged

   private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextField1ActionPerformed
   {//GEN-HEADEREND:event_jTextField1ActionPerformed
      if (!isAdjusting)
      {
      	 meta.setCommentDelimiter(jTextField1.getText());
     	 if (meta.hasCommentsInFile()) util.getPreview().setLineComment(meta.getCommentDelimiter());
         previewModel.fireTableDataChanged();
      }
   }//GEN-LAST:event_jTextField1ActionPerformed

   private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton2ActionPerformed
   {//GEN-HEADEREND:event_jRadioButton2ActionPerformed
      if (!isAdjusting) if (jRadioButton2.isSelected()) meta.setDataType(meta.FIXED);
   }//GEN-LAST:event_jRadioButton2ActionPerformed

   private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton1ActionPerformed
   {//GEN-HEADEREND:event_jRadioButton1ActionPerformed
      if (!isAdjusting) if (jRadioButton1.isSelected()) meta.setDataType(meta.DELIMITED);
   }//GEN-LAST:event_jRadioButton1ActionPerformed
   
   private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox2ActionPerformed
   {//GEN-HEADEREND:event_jCheckBox2ActionPerformed
      if (!isAdjusting)
      {
         jTextField1.setEnabled(jCheckBox2.isSelected());
         meta.setCommentsInFile(jCheckBox2.isSelected());
         if (meta.hasCommentsInFile()) util.getPreview().setLineComment(meta.getCommentDelimiter());
         else util.getPreview().setLineComment(null);
         previewModel.fireTableDataChanged();
      }
   }//GEN-LAST:event_jCheckBox2ActionPerformed
   
   private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox1ActionPerformed
   {//GEN-HEADEREND:event_jCheckBox1ActionPerformed
      if (!isAdjusting)
      {	
         jSpinner2.setEnabled(jCheckBox1.isSelected());
         meta.setColumnHeadersInFile(jCheckBox1.isSelected());
         if (jCheckBox1.isSelected())
         {
            int n = ((Number) model2.getValue()).intValue();
            model1.setMinimum(new Integer(n+1));
            if (model1.getMinimum().compareTo(model1.getValue())>0) model1.setValue(new Integer(n+1));
         }
         else
         {
            model1.setMinimum(new Integer(1));
         }
      }
   }//GEN-LAST:event_jCheckBox1ActionPerformed

   public WizardPage getNext()
   {
      next.setData(util);
      return next;
   }   
   
   public WizardPage[] getNextWizardPages()
   {
      return new WizardPage[]{ next };
   }   
   
   public void beforeShowing()
   {
      util.getPreview().setStartLine(0);
      super.beforeShowing();
   }
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JCheckBox jCheckBox1;
   private javax.swing.JCheckBox jCheckBox2;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JSpinner jSpinner1;
   private javax.swing.JSpinner jSpinner2;
   private javax.swing.JTable jTable1;
   private javax.swing.JTextField jTextField1;
   private org.freehep.jas.extensions.text.core.TextMetaData meta;
   // End of variables declaration//GEN-END:variables
   private DelimitersPage next = new DelimitersPage();
   private GUIUtilities util;
   private FilePreviewModel previewModel;
   private SpinnerNumberModel model1 = new SpinnerNumberModel(1,1,1000,1);
   private SpinnerNumberModel model2 = new SpinnerNumberModel(1,1,1000,1);
   private boolean isAdjusting = false;
    
   private static class RowHeaderRenderer extends DefaultTableCellRenderer
   {
      public RowHeaderRenderer()
      {         
         setBorder(UIManager.getBorder("TableHeader.cellBorder"));
	 setHorizontalAlignment(RIGHT);
      }

      public void updateUI()
      {
         super.updateUI();
         setBorder(UIManager.getBorder("TableHeader.cellBorder"));
      }
   
      public Component getTableCellRendererComponent(JTable table, Object value,
      boolean selected, boolean focused, int row, int column)
      {
         if (table != null)
         {
            JTableHeader header = table.getTableHeader();
            if (header != null)
            {
               setForeground(header.getForeground());
               setBackground(header.getBackground());
            }
         }
         setValue(String.valueOf(row+1));
         return this;
      }
   }
}
