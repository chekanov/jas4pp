package org.freehep.jas.extensions.text.gui;

import hep.aida.IAnalysisFactory;
import java.awt.Component;
import java.awt.Rectangle;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;

import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import org.freehep.application.Application;
import org.freehep.jas.extensions.text.aida.TextStoreFactory;
import org.freehep.jas.extensions.text.core.ColumnFormat;
import org.freehep.jas.extensions.text.core.FormatManager;
import org.freehep.jas.extensions.text.core.TextMetaData;
import org.freehep.jas.extensions.text.core.TypeScanner;
import org.freehep.swing.wizard.Finishable;
import org.freehep.swing.wizard.WizardPage;

/**
 *
 * @author  Tony Johnson
 */
public class TypePage extends WizardPage implements ListSelectionListener, Finishable
{
   
   /** Creates new form TypePage */
   public TypePage()
   {
      initComponents();
      jTable1.getTableHeader().setReorderingAllowed(false);
      jTable2.getTableHeader().setReorderingAllowed(false);
   }
   void setData(GUIUtilities util)
   {
      this.util = util;
      
      TextMetaData meta = util.getMetaData();
      TypeScanner scanner = new TypeScanner(FormatManager.getAvailableFormats());
      PreviewModel previewModel = new PreviewModel(util);
      scanner.scan(util.getPreview(),meta.getTokenizer(),previewModel.getColumnCount());
      util.setComputedColumnFormats(scanner.getFormats());
      ColumnTableModel ctm = new ColumnTableModel(previewModel, util);
      jTable1.setModel(ctm);
      jTable2.setModel(previewModel);
      
      // The same selection model is used as both the column selection model for the
      // preview table, and the row selection model for the type table
      ListSelectionModel model = jTable2.getColumnModel().getSelectionModel();
      jTable1.setSelectionModel(model);
      model.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      model.addListSelectionListener(this);
      
      TableColumn col = jTable1.getColumnModel().getColumn(2);
      JComboBox combo = new JComboBox(FormatManager.getAvailableFormats());
      combo.setRenderer(new MyComboRenderer());
      col.setCellEditor(new DefaultCellEditor(combo));
      col.setCellRenderer(new MyComboBoxRenderer(FormatManager.getAvailableFormats()));
      
      TableColumn col0 = jTable1.getColumnModel().getColumn(0);
      col0.setMaxWidth(col0.getPreferredWidth());
      col0.setMinWidth(col0.getPreferredWidth());
      
      TableColumn col2 = jTable1.getColumnModel().getColumn(2);
      col2.setMaxWidth(col2.getPreferredWidth());
      col2.setMinWidth(col2.getPreferredWidth());
      
   }
   public void valueChanged(ListSelectionEvent e)
   {
      // Scroll the table which didnt originate the selection change
      // so that the new selection is visible.
      if (!e.getValueIsAdjusting())
      {
         ListSelectionModel model = (ListSelectionModel) e.getSource();
         int row = model.getLeadSelectionIndex();
         Rectangle r = jTable1.getCellRect(row, 0, true);
         r.x = -jTable1.getX();
         jTable1.scrollRectToVisible(r);
         
         r = jTable2.getCellRect(0, row, true);
         r.y = -jTable2.getY();
         jTable2.scrollRectToVisible(r);
      }
   }
   public void onFinish()
   {
      try
      {
         TextMetaData meta = util.getMetaData();
         TextStoreFactory.registerMetaData(util.getFile(),util.getMetaData());
         IAnalysisFactory af = IAnalysisFactory.create();
         af.createTreeFactory().create(util.getFile().getAbsolutePath(),"text",true,false,"automount=true");
         // Store the spec file for future use
         try
         {
            OutputStream out = new FileOutputStream(util.getFile().getAbsolutePath()+".spec");
            meta.toXML(out);
            out.close();
         }
         catch (IOException x)
         {
            System.err.println("Warning: Could not write spec file for "+util.getFile());
            x.printStackTrace();
         }
         util.dispose();
         dispose();
      }
      catch (IOException x)
      {
         Application.error(this,"Error opening file",x);
      }
   }
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   private void initComponents()//GEN-BEGIN:initComponents
   {
      java.awt.GridBagConstraints gridBagConstraints;

      jLabel1 = new javax.swing.JLabel();
      jPanel1 = new javax.swing.JPanel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jTable1 = new javax.swing.JTable();
      jButton1 = new javax.swing.JButton();
      jPanel2 = new javax.swing.JPanel();
      jScrollPane2 = new javax.swing.JScrollPane();
      jTable2 = new PreviewTable();

      setLayout(new java.awt.GridBagLayout());

      setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10)));
      jLabel1.setText("Adjust the name and data type for each colum using the table below.");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      add(jLabel1, gridBagConstraints);

      jPanel1.setLayout(new java.awt.GridBagLayout());

      jPanel1.setBorder(new javax.swing.border.TitledBorder("Data Types"));
      jScrollPane1.setPreferredSize(new java.awt.Dimension(250, 150));
      jTable1.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][]
         {

         },
         new String []
         {

         }
      ));
      jScrollPane1.setViewportView(jTable1);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(jScrollPane1, gridBagConstraints);

      jButton1.setText("Restore Defaults");
      jButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton1ActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      jPanel1.add(jButton1, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.weighty = 0.75;
      add(jPanel1, gridBagConstraints);

      jPanel2.setLayout(new java.awt.BorderLayout());

      jPanel2.setBorder(new javax.swing.border.TitledBorder("Data Preview"));
      jScrollPane2.setPreferredSize(new java.awt.Dimension(400, 150));
      jTable2.setColumnSelectionAllowed(true);
      jTable2.setRowSelectionAllowed(false);
      jScrollPane2.setViewportView(jTable2);

      jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.weighty = 0.25;
      add(jPanel2, gridBagConstraints);

   }//GEN-END:initComponents

   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
   {//GEN-HEADEREND:event_jButton1ActionPerformed
      util.getMetaData().resetColumns();
      ((ColumnTableModel) jTable1.getModel()).fireTableDataChanged();
   }//GEN-LAST:event_jButton1ActionPerformed
   
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JTable jTable1;
   private javax.swing.JTable jTable2;
   // End of variables declaration//GEN-END:variables
   private GUIUtilities util;
   
   private static class MyComboBoxRenderer extends JComboBox implements TableCellRenderer
   {
      public MyComboBoxRenderer(Object[] items)
      {
         super(items);
         setRenderer(new MyComboRenderer());
      }
      
      public Component getTableCellRendererComponent(JTable table, Object value,
      boolean isSelected, boolean hasFocus, int row, int column)
      {
         if (isSelected)
         {
            setForeground(table.getSelectionForeground());
            super.setBackground(table.getSelectionBackground());
         } else
         {
            setForeground(table.getForeground());
            setBackground(table.getBackground());
         }
         
         // Select the current value
         setSelectedItem(value);
         return this;
      }
   }
   
   private static class MyComboRenderer extends DefaultListCellRenderer
   {
      public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
      {
         super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
         if (value instanceof ColumnFormat) setText(((ColumnFormat) value).getName());
         return this;
      }
      
   }
}
