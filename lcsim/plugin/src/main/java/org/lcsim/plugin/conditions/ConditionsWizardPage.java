package org.lcsim.plugin.conditions;

import java.util.Enumeration;
import javax.swing.AbstractButton;
import org.freehep.swing.wizard.Finishable;
import org.freehep.swing.wizard.HasNextPages;
import org.freehep.swing.wizard.WizardPage;
import org.lcsim.conditions.ConditionsManager.ConditionsNotFoundException;
import org.lcsim.conditions.ConditionsReader;

/**
 *
 * @author tonyj
 */
class ConditionsWizardPage extends WizardPage implements HasNextPages, Finishable
{
   private WizardPage nextPage;
   private InteractiveConditionsManagerImplementation cm;
   private final WizardPage[] pages;
   private String detectorName;
   private boolean hepRepPluginInstalled;
   /** Creates new form ConditionsWizardPanel */
   ConditionsWizardPage(InteractiveConditionsManagerImplementation cm, String detectorName)
   {
      this.cm = cm;
      this.detectorName = detectorName;
      try
      {
         Class.forName("hep.graphics.heprep.HepRep");
         hepRepPluginInstalled = true;
      }
      catch (Exception x)
      {
         hepRepPluginInstalled = false;
      }
      pages = hepRepPluginInstalled ? new WizardPage[]{ new ConditionsAliasWizardPage(this) , new HepRepSelectWizardPage(this) } : new WizardPage[]{ new ConditionsAliasWizardPage(this) };
      initComponents();
      detectorLabel.setText(detectorName);
      setNextEnabled(false);
      setFinishEnabled(false);
      String lastSelected = cm.getStudio().getUserProperties().getProperty(getClass().getName()+".lastSelected");
      if (lastSelected != null) 
      {
         Enumeration e = buttonGroup1.getElements();
         while (e.hasMoreElements())
         {
            AbstractButton button = (AbstractButton) e.nextElement();
            if (lastSelected.equals(button.getActionCommand())) 
            {
                button.setSelected(true);
                setSelectedButton(button);
            }
         }
      }
   }
   
   public WizardPage getNext()
   {
      return nextPage;
   }
   public WizardPage[] getNextWizardPages()
   {
      return pages;
   }
   
   public void onFinish()
   {
      if (noDetectorButton.isSelected())
      {
         cm.setConditionsReader(ConditionsReader.createDummy(),detectorName);
         cm.setDetectorFound(true);
      }
      cm.getStudio().getUserProperties().setProperty(getClass().getName()+".lastSelected",buttonGroup1.getSelection().getActionCommand());
      dispose();
   }
   void addAlias(String name) throws ConditionsNotFoundException
   {
      cm.addAlias(detectorName,name);
      cm.setDetectorFound(true);
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      java.awt.GridBagConstraints gridBagConstraints;
      javax.swing.JLabel jLabel1;
      javax.swing.JLabel jLabel3;

      buttonGroup1 = new javax.swing.ButtonGroup();
      jLabel1 = new javax.swing.JLabel();
      detectorLabel = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      aliasButton = new javax.swing.JRadioButton();
      locateButton = new javax.swing.JRadioButton();
      heprepButton = new javax.swing.JRadioButton();
      noDetectorButton = new javax.swing.JRadioButton();

      setLayout(new java.awt.GridBagLayout());

      setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
      jLabel1.setText("Sorry, no information could be found on the following detector:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      add(jLabel1, gridBagConstraints);

      detectorLabel.setText("jLabel2");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
      add(detectorLabel, gridBagConstraints);

      jLabel3.setText("Please choose one of the following");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
      add(jLabel3, gridBagConstraints);

      buttonGroup1.add(aliasButton);
      aliasButton.setMnemonic('A');
      aliasButton.setText("Alias this detector to an existing detector");
      aliasButton.setActionCommand("alias");
      aliasButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      aliasButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
      aliasButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            radioButtonSelected(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
      add(aliasButton, gridBagConstraints);

      buttonGroup1.add(locateButton);
      locateButton.setMnemonic('G');
      locateButton.setText("Give location of a conditions database for this detector (not yet implemented)");
      locateButton.setActionCommand("give");
      locateButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      locateButton.setEnabled(false);
      locateButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
      locateButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            radioButtonSelected(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
      add(locateButton, gridBagConstraints);

      buttonGroup1.add(heprepButton);
      heprepButton.setMnemonic('H');
      heprepButton.setText("Give location of a HepRep file for this detector");
      heprepButton.setActionCommand("heprep");
      heprepButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      heprepButton.setEnabled(hepRepPluginInstalled);
      heprepButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
      heprepButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            radioButtonSelected(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
      add(heprepButton, gridBagConstraints);

      buttonGroup1.add(noDetectorButton);
      noDetectorButton.setMnemonic('P');
      noDetectorButton.setText("Proceed with no detector information (limited functionality)");
      noDetectorButton.setActionCommand("proceed");
      noDetectorButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      noDetectorButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
      noDetectorButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            radioButtonSelected(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
      add(noDetectorButton, gridBagConstraints);

   }// </editor-fold>//GEN-END:initComponents

   private void radioButtonSelected(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radioButtonSelected
   {//GEN-HEADEREND:event_radioButtonSelected
      setSelectedButton(evt.getSource());
   }
   private void setSelectedButton(Object button)
   {
      WizardPage next = null;
      if (button == aliasButton) next = pages[0];
      else if (button == heprepButton) next = pages[1];
      nextPage = next;
      setNextEnabled(next != null);
      setFinishEnabled(next == null);
   }//GEN-LAST:event_radioButtonSelected

   String getDetectorName()
   {
      return detectorName;
   }

   InteractiveConditionsManagerImplementation getConditionsManager()
   {
      return cm;
   }

   
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JRadioButton aliasButton;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JLabel detectorLabel;
   private javax.swing.JRadioButton heprepButton;
   private javax.swing.JRadioButton locateButton;
   private javax.swing.JRadioButton noDetectorButton;
   // End of variables declaration//GEN-END:variables
   
}
