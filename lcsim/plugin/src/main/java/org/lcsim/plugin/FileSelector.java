package org.lcsim.plugin;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.filechooser.FileFilter;
import org.freehep.application.PropertyUtilities;
import org.freehep.application.studio.Studio;
import org.freehep.swing.ErrorDialog;
import org.freehep.swing.wizard.Finishable;
import org.freehep.swing.wizard.WizardPage;
import org.lcsim.util.loop.FileList;

/**
 *
 * @author tonyj
 */
class FileSelector extends WizardPage implements Finishable, ListDataListener
{
   private DefaultComboBoxModel model = new DefaultComboBoxModel();
   private String fileExtension;
   private FileFilter fileListFileFilter;
   private FileFilter fileFileFilter;
   private String fileType;
   private String defaultFileListTitle;
   private Studio app;
   
   /** Creates new form LCSimFileSelector */
   public FileSelector(Studio app, String fileType, String fileExtension, FileFilter fileFilter, FileFilter fileListFilter)
   {
      this.app = app;
      this.fileType = fileType;
      this.fileExtension = fileExtension;
      this.fileFileFilter = fileFilter;
      this.fileListFileFilter = fileListFilter;
      this.defaultFileListTitle = fileType+" File List";
      model.addListDataListener(this);
      initComponents();
      boolean multi = Boolean.valueOf(app.getUserProperties().getProperty("org.lcsim.FileSelector.Multi."+fileType,"false"));
      singleMultiTabbedPane.setSelectedIndex(multi ? 1 : 0);
      String[] list = PropertyUtilities.getStringArray(app.getUserProperties(),"org.lcsim.FileSelector.FileList."+fileType,null);
      if (list != null) for (int i=0; i<list.length; i++) model.addElement(new File(list[i]));
      listNameTextField.setText(app.getUserProperties().getProperty("org.lcsim.FileSelector.FileList.title."+fileType,defaultFileListTitle));
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      java.awt.GridBagConstraints gridBagConstraints;
      javax.swing.JLabel jLabel1;
      javax.swing.JLabel jLabel2;
      javax.swing.JScrollPane jScrollPane1;

      singleMultiTabbedPane = new javax.swing.JTabbedPane();
      singleFilePanel = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      fileNameTextField = new javax.swing.JTextField();
      browseButton = new javax.swing.JButton();
      multiFilePanel = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();
      listNameTextField = new javax.swing.JTextField();
      jScrollPane1 = new javax.swing.JScrollPane();
      fileList = new javax.swing.JList();
      upButton = new javax.swing.JButton();
      downButton = new javax.swing.JButton();
      addButton = new javax.swing.JButton();
      removeButton = new javax.swing.JButton();
      saveButton = new javax.swing.JButton();
      restoreButton = new javax.swing.JButton();

      setLayout(new java.awt.BorderLayout());

      singleMultiTabbedPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
      singleFilePanel.setLayout(new java.awt.GridBagLayout());

      singleFilePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
      jLabel1.setText("File: ");
      singleFilePanel.add(jLabel1, new java.awt.GridBagConstraints());

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      singleFilePanel.add(fileNameTextField, gridBagConstraints);

      browseButton.setText("Browse...");
      browseButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            browseButtonActionPerformed(evt);
         }
      });

      singleFilePanel.add(browseButton, new java.awt.GridBagConstraints());

      singleMultiTabbedPane.addTab("Single File", singleFilePanel);

      multiFilePanel.setLayout(new java.awt.GridBagLayout());

      multiFilePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
      jLabel2.setText("List Name:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
      multiFilePanel.add(jLabel2, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      multiFilePanel.add(listNameTextField, gridBagConstraints);

      fileList.setModel(model);
      fileList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
      {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt)
         {
            fileListValueChanged(evt);
         }
      });

      jScrollPane1.setViewportView(fileList);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.gridheight = 6;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.weighty = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
      multiFilePanel.add(jScrollPane1, gridBagConstraints);

      upButton.setText("Move Up");
      upButton.setEnabled(false);
      upButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            upButtonActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
      gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
      multiFilePanel.add(upButton, gridBagConstraints);

      downButton.setText("Move Down");
      downButton.setEnabled(false);
      downButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            downButtonActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
      multiFilePanel.add(downButton, gridBagConstraints);

      addButton.setText("Add...");
      addButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            addButtonActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
      multiFilePanel.add(addButton, gridBagConstraints);

      removeButton.setText("Remove");
      removeButton.setEnabled(false);
      removeButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            removeButtonActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
      multiFilePanel.add(removeButton, gridBagConstraints);

      saveButton.setText("Save...");
      saveButton.setEnabled(false);
      saveButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            saveButtonActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
      multiFilePanel.add(saveButton, gridBagConstraints);

      restoreButton.setText("Restore...");
      restoreButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            restoreButtonActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
      multiFilePanel.add(restoreButton, gridBagConstraints);

      singleMultiTabbedPane.addTab("Multiple Files", multiFilePanel);

      add(singleMultiTabbedPane, java.awt.BorderLayout.CENTER);

   }// </editor-fold>//GEN-END:initComponents
   
   private void browseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseButtonActionPerformed
   {//GEN-HEADEREND:event_browseButtonActionPerformed
      String dir = app.getUserProperties().getProperty("org.lcsim.FileSelector.Browse."+fileType);
      JFileChooser chooser = new JFileChooser(dir);
      chooser.setDialogTitle("Open "+fileType+" File ...");
      chooser.setMultiSelectionEnabled(false);
      chooser.addChoosableFileFilter(fileListFileFilter);
      chooser.setFileFilter(fileFileFilter);
      if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
      
      File file = chooser.getSelectedFile();
      app.getUserProperties().setProperty("org.lcsim.FileSelector.Browse."+fileType,file.getAbsolutePath());
      if (file.getPath().endsWith("."+fileExtension))
      {
         singleMultiTabbedPane.setSelectedIndex(1);
         readFileList(file);
      }
      else
      {
         fileNameTextField.setText(file.getAbsolutePath());
      }
   }//GEN-LAST:event_browseButtonActionPerformed
   
   private void restoreButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_restoreButtonActionPerformed
   {//GEN-HEADEREND:event_restoreButtonActionPerformed
      String dir = app.getUserProperties().getProperty("org.lcsim.FileSelector.SaveRestore."+fileType);
      JFileChooser chooser = new JFileChooser(dir);
      chooser.setDialogTitle("Restore File Set ...");
      chooser.setMultiSelectionEnabled(false);
      chooser.setFileFilter(fileListFileFilter);
      if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
      
      File file = chooser.getSelectedFile();
      readFileList(file);
      app.getUserProperties().setProperty("org.lcsim.FileSelector.SaveRestore."+fileType,file.getAbsolutePath());
   }//GEN-LAST:event_restoreButtonActionPerformed
   
   private void readFileList(File file)
   {
      try
      {
         FileList utils = new FileList(file,defaultFileListTitle);
         
         model.removeAllElements();
         for (File f : utils.getFileList()) model.addElement(f);
         listNameTextField.setText(utils.getTitle());
      }
      catch (IOException x)
      {
         ErrorDialog.showErrorDialog(this,"Error restoring file list",x);
      }
   }
   private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
   {//GEN-HEADEREND:event_saveButtonActionPerformed
      String dir = app.getUserProperties().getProperty("org.lcsim.FileSelector.SaveRestore."+fileType);
      JFileChooser chooser = new JFileChooser(dir);
      chooser.setDialogTitle("Save File Set ...");
      chooser.setMultiSelectionEnabled(false);
      chooser.setFileFilter(fileListFileFilter);
      if (chooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) return;
      
      File file = chooser.getSelectedFile();
      if (file.getName().indexOf(".") < 0) file = new File(file.getAbsolutePath()+"."+fileExtension);
      if (file.exists())
      {
         int rc = JOptionPane.showConfirmDialog(this,"Overwrite existing file?");
         if (rc != JOptionPane.OK_OPTION) return;
      }
      try
      {
         List<File> fileList = new ArrayList<File>();
         for (int i=0; i<model.getSize(); i++) fileList.add((File) model.getElementAt(i));
         FileList utils = new FileList(fileList,listNameTextField.getText());
         utils.write(file);
         app.getUserProperties().setProperty("org.lcsim.FileSelector.SaveRestore."+fileType,file.getAbsolutePath());
      }
      catch (IOException x)
      {
         ErrorDialog.showErrorDialog(this,"Error saving file list",x);
      }
   }//GEN-LAST:event_saveButtonActionPerformed
   
   private void downButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_downButtonActionPerformed
   {//GEN-HEADEREND:event_downButtonActionPerformed
      int[] selected = fileList.getSelectedIndices();
      for (int i=0; i<selected.length; i++)
      {
         int index = selected[i];
         Object o = model.getElementAt(index);
         model.removeElementAt(index);
         model.insertElementAt(o,index+1);
         selected[i]++;
      }
      fileList.setSelectedIndices(selected);
   }//GEN-LAST:event_downButtonActionPerformed
   
   private void upButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_upButtonActionPerformed
   {//GEN-HEADEREND:event_upButtonActionPerformed
      int[] selected = fileList.getSelectedIndices();
      for (int i=0; i<selected.length; i++)
      {
         int index = selected[i];
         Object o = model.getElementAt(index);
         model.removeElementAt(index);
         model.insertElementAt(o,index-1);
         selected[i]--;
      }
      fileList.setSelectedIndices(selected);
   }//GEN-LAST:event_upButtonActionPerformed
   
   private void removeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeButtonActionPerformed
   {//GEN-HEADEREND:event_removeButtonActionPerformed
      int[] selected = fileList.getSelectedIndices();
      for (int i=selected.length-1; i>=0; i--) model.removeElementAt(selected[i]);
   }//GEN-LAST:event_removeButtonActionPerformed
   
   private void fileListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_fileListValueChanged
   {//GEN-HEADEREND:event_fileListValueChanged
      int[] selected = fileList.getSelectedIndices();
      removeButton.setEnabled(selected.length > 0);
      upButton.setEnabled(selected.length > 0 && selected[0]>0);
      downButton.setEnabled(selected.length > 0 && selected[selected.length-1] < model.getSize()-1);
   }//GEN-LAST:event_fileListValueChanged
   
   private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
   {//GEN-HEADEREND:event_addButtonActionPerformed
      String dir = app.getUserProperties().getProperty("org.lcsim.FileSelector.Add."+fileType);
      JFileChooser chooser = new JFileChooser(dir);
      chooser.setDialogTitle("Open "+fileType+" file(s)");
      chooser.setFileFilter(fileFileFilter);
      chooser.setMultiSelectionEnabled(true);
      int rc = chooser.showDialog(this,"Add");
      if (rc != JFileChooser.APPROVE_OPTION) return;
      File[] list = chooser.getSelectedFiles();
      if (list == null || list.length == 0) return;
      app.getUserProperties().setProperty("org.lcsim.FileSelector.Add."+fileType,list[0].getAbsolutePath());
      
      for (File file : list)
      {
         model.addElement(file);
      }
   }//GEN-LAST:event_addButtonActionPerformed
   
   
   public void intervalAdded(ListDataEvent e)
   {
      saveButton.setEnabled(model.getSize()>0);
   }
   
   public void intervalRemoved(ListDataEvent e)
   {
      saveButton.setEnabled(model.getSize()>0);
   }
   
   public void contentsChanged(ListDataEvent e)
   {
      saveButton.setEnabled(model.getSize()>0);
   }
   
   boolean isMultiFileSelected()
   {
      return singleMultiTabbedPane.getSelectedIndex() == 1;
   }
   
   FileList getSelectedFiles()
   {
      List<File> files = new ArrayList<File>();
      for (int i=0; i<model.getSize(); i++)  files.add((File) model.getElementAt(i));
      return new FileList(files,listNameTextField.getText());
   }
   
   File getSelectedFile()
   {
      return new File(fileNameTextField.getText());
   }
   public void onFinish()
   {
      app.getUserProperties().setProperty("org.lcsim.FileSelector.Multi."+fileType,String.valueOf(isMultiFileSelected()));
      String[] list = new String[model.getSize()];
      for (int i=0; i<list.length; i++) list[i] = model.getElementAt(i).toString();
      PropertyUtilities.setStringArray(app.getUserProperties(),"org.lcsim.FileSelector.FileList."+fileType,list);
      app.getUserProperties().setProperty("org.lcsim.FileSelector.FileList.title."+fileType,listNameTextField.getText());
      dispose();
   }
   
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton addButton;
   private javax.swing.JButton browseButton;
   private javax.swing.JButton downButton;
   private javax.swing.JList fileList;
   private javax.swing.JTextField fileNameTextField;
   private javax.swing.JTextField listNameTextField;
   private javax.swing.JPanel multiFilePanel;
   private javax.swing.JButton removeButton;
   private javax.swing.JButton restoreButton;
   private javax.swing.JButton saveButton;
   private javax.swing.JPanel singleFilePanel;
   private javax.swing.JTabbedPane singleMultiTabbedPane;
   private javax.swing.JButton upButton;
   // End of variables declaration//GEN-END:variables
   
}
