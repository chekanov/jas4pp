package org.lcsim.plugin.conditions;

import hep.graphics.heprep.HepRep;
import hep.graphics.heprep.HepRepFactory;
import hep.graphics.heprep.HepRepReader;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.zip.GZIPInputStream;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.freehep.application.Application;
import org.freehep.jas.util.OpenLocalFilePanel;
import org.freehep.swing.ExtensionFileFilter;
import org.freehep.swing.wizard.Finishable;
import org.freehep.swing.wizard.WizardPage;
import org.lcsim.conditions.ConditionsReader;
import org.lcsim.util.loop.DummyConditionsConverter;

/**
 *
 * @author tonyj
 * @version $Id: HepRepSelectWizardPage.java,v 1.2 2007/09/11 00:21:02 tonyj Exp $
 */
class HepRepSelectWizardPage extends WizardPage implements Finishable, ChangeListener
{
   private ConditionsWizardPage wp;
   private OpenLocalFilePanel olfp;
   /** Creates new form ConditionsAliasWizardPage */
   HepRepSelectWizardPage(ConditionsWizardPage wp)
   {
      this.wp = wp;
      this.olfp = new OpenLocalFilePanel("heprep",new HepRepFileFilter(),false,true);
      initComponents();
      olfp.addChangeListener(this);
      stateChanged(null);
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      java.awt.GridBagConstraints gridBagConstraints;

      jPanel1 = olfp;
      jLabel2 = new javax.swing.JLabel();
      jTextField2 = new javax.swing.JTextField();

      setLayout(new java.awt.GridBagLayout());

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      add(jPanel1, gridBagConstraints);

      jLabel2.setText("Field:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
      add(jLabel2, gridBagConstraints);

      jTextField2.setColumns(10);
      jTextField2.setText("5");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      add(jTextField2, gridBagConstraints);

   }// </editor-fold>//GEN-END:initComponents
   
   public void onFinish()
   {
      try
      {
         InputStream in = new FileInputStream(olfp.getFile());
         try
         {
            double field = Double.parseDouble(jTextField2.getText());
            
            if (olfp.getGZIPed()) in = new GZIPInputStream(in);
            else in = new BufferedInputStream(in);
            HepRepReader reader = HepRepFactory.create().createHepRepReader(in);
            HepRep hepRep = reader.next();
            
            String detectorName = wp.getDetectorName();
            InteractiveConditionsManagerImplementation cm = wp.getConditionsManager();
            ConditionsReader dummyReader = ConditionsReader.createDummy();
            cm.setConditionsReader(dummyReader, detectorName);
            HepRepOnlyDetector detector = new HepRepOnlyDetector(detectorName, hepRep, field);
            cm.registerConditionsConverter(new DummyConditionsConverter(detector));
            cm.setDetectorFound(true);
            
            olfp.saveState();
            dispose();
         }
         finally
         {
            in.close();
         }
         
         
      }
      catch (Exception x)
      {
         Application.error(this,"Error handling heprep",x);
      }
   }
   
   public void stateChanged(ChangeEvent e)
   {
      this.setFinishEnabled(olfp.isFileSelected());
   }
   
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel jLabel2;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JTextField jTextField2;
   // End of variables declaration//GEN-END:variables
   
   private class HepRepFileFilter extends ExtensionFileFilter
   {
      HepRepFileFilter()
      {
         super(new String[]{".heprep", ".heprep.gz"}, "HepRep file");
      }
   }
}
