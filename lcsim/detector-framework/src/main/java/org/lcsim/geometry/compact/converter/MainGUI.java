package org.lcsim.geometry.compact.converter;

import java.awt.Dimension;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import org.lcsim.geometry.compact.converter.Main.InvalidArgumentException;

/**
 *
 * @author  tonyj
 */
public class MainGUI extends javax.swing.JFrame
{
   private Preferences prefs = Preferences.userNodeForPackage(MainGUI.class);
   private List<Converter> converters;
   
   /** Creates new form MainGUI */
   public MainGUI(String inFile, String outFile, String format)
   {
      initComponents();
      inputTextField.setText(inFile == null ? prefs.get("input","") : inFile);
      outputTextField.setText(outFile == null ? prefs.get("output","") : outFile);
      DefaultComboBoxModel model = new DefaultComboBoxModel();
      converters = Main.getConverters();
      for (Converter c : converters)
      {
         model.addElement(c.getOutputFormat());
      }
      converterComboBox.setModel(model);
      if (format == null) format = prefs.get("format",null);
      if (format != null) converterComboBox.setSelectedItem(format);
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      java.awt.GridBagConstraints gridBagConstraints;
      javax.swing.JLabel jLabel1;
      javax.swing.JLabel jLabel2;
      javax.swing.JLabel jLabel3;
      javax.swing.JLabel jLabel4;
      javax.swing.JPanel jPanel1;
      javax.swing.JPanel jPanel2;
      javax.swing.JSeparator jSeparator1;

      jLabel1 = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      jPanel1 = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();
      inputTextField = new javax.swing.JTextField();
      inputBrowseButton = new javax.swing.JButton();
      jLabel3 = new javax.swing.JLabel();
      outputTextField = new javax.swing.JTextField();
      outputBrowseButton = new javax.swing.JButton();
      jLabel4 = new javax.swing.JLabel();
      converterComboBox = new javax.swing.JComboBox();
      jPanel2 = new javax.swing.JPanel();
      convertButton = new javax.swing.JButton();
      exitButton = new javax.swing.JButton();

      getContentPane().setLayout(new java.awt.GridBagLayout());

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("GeomConverter");
      addWindowListener(new java.awt.event.WindowAdapter()
      {
         public void windowClosing(java.awt.event.WindowEvent evt)
         {
            MainGUI.this.windowClosing(evt);
         }
      });

      jLabel1.setBackground(new java.awt.Color(255, 255, 255));
      jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24));
      jLabel1.setText("GeomConverter");
      jLabel1.setOpaque(true);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      getContentPane().add(jLabel1, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      getContentPane().add(jSeparator1, gridBagConstraints);

      jPanel1.setLayout(new java.awt.GridBagLayout());

      jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10)));
      jLabel2.setText("Input");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
      jPanel1.add(jLabel2, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      jPanel1.add(inputTextField, gridBagConstraints);

      inputBrowseButton.setText("Browse...");
      inputBrowseButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            inputBrowseButtonActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      jPanel1.add(inputBrowseButton, gridBagConstraints);

      jLabel3.setText("Output");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
      jPanel1.add(jLabel3, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(outputTextField, gridBagConstraints);

      outputBrowseButton.setText("Browse...");
      outputBrowseButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            outputBrowseButtonActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      jPanel1.add(outputBrowseButton, gridBagConstraints);

      jLabel4.setText("Format");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
      jPanel1.add(jLabel4, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      jPanel1.add(converterComboBox, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.weighty = 1.0;
      getContentPane().add(jPanel1, gridBagConstraints);

      convertButton.setText("Convert");
      convertButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            convertButtonActionPerformed(evt);
         }
      });

      jPanel2.add(convertButton);

      exitButton.setText("Exit");
      exitButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            exitButtonActionPerformed(evt);
         }
      });

      jPanel2.add(exitButton);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
      getContentPane().add(jPanel2, gridBagConstraints);

      pack();
   }
   // </editor-fold>//GEN-END:initComponents

   private void convertButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_convertButtonActionPerformed
   {//GEN-HEADEREND:event_convertButtonActionPerformed
      try
      {
         String inFile = inputTextField.getText();
         InputStream in = new BufferedInputStream(new FileInputStream(inFile));
         String outFile = outputTextField.getText();
         OutputStream out = new BufferedOutputStream(new FileOutputStream(outFile));
         getCurrentConverter().convert(inFile,in,out);
         out.close();
         in.close();
         // No Exception
         JOptionPane.showMessageDialog(this,"Conversion successful","Success",JOptionPane.INFORMATION_MESSAGE);
      }
      catch (Exception x)
      {
         x.printStackTrace();
         JOptionPane.showMessageDialog(this,x.toString(),"Error",JOptionPane.ERROR_MESSAGE);
      }
   }//GEN-LAST:event_convertButtonActionPerformed

   private void outputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_outputBrowseButtonActionPerformed
   {//GEN-HEADEREND:event_outputBrowseButtonActionPerformed
      doBrowse(outputTextField, false, getCurrentConverter().getFileFilter());
   }//GEN-LAST:event_outputBrowseButtonActionPerformed
   
   private void windowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_windowClosing
   {//GEN-HEADEREND:event_windowClosing
      exit();
   }//GEN-LAST:event_windowClosing
   
   private void exitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitButtonActionPerformed
   {//GEN-HEADEREND:event_exitButtonActionPerformed
      exit();
   }//GEN-LAST:event_exitButtonActionPerformed
   
   private void inputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_inputBrowseButtonActionPerformed
   {//GEN-HEADEREND:event_inputBrowseButtonActionPerformed
      doBrowse(inputTextField,true,new CompactFileFilter());
   }//GEN-LAST:event_inputBrowseButtonActionPerformed
   
   private void doBrowse(JTextField field, boolean input, FileFilter filter)
   {
      JFileChooser chooser = new JFileChooser();
      chooser.setCurrentDirectory(new File(field.getText()));
      chooser.addChoosableFileFilter(filter);
      chooser.setApproveButtonText("Select");
      chooser.setApproveButtonMnemonic('S');
      int rc = input ? chooser.showOpenDialog(this) : chooser.showSaveDialog(this);
      if (rc == JFileChooser.APPROVE_OPTION)
      {
         field.setText(chooser.getSelectedFile().getAbsolutePath());
      }      
   }
   private Converter getCurrentConverter()
   {
      return converters.get(converterComboBox.getSelectedIndex());
   }
   /**
    * @param args the command line arguments
    */
   public static void main(String args[])
   {
      try
      {
         UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
      }
      catch (Exception x)
      {
         // Too bad
      }
      Main main = new Main();
      try
      {
         main.parseArgs(args);
      }
      catch (InvalidArgumentException x)
      {
         String message = x.getMessage();
         if (message != null) System.err.println(message);
      }
      MainGUI gui = new MainGUI(main.getInputFile(), main.getOutputFile(), main.getFormat());
      gui.setSize(new Dimension(500,300));
      gui.setLocationByPlatform(true);
      gui.setVisible(true);
   }
   private void exit()
   {
      prefs.put("input",inputTextField.getText());
      prefs.put("output", outputTextField.getText());
      prefs.put("format", converterComboBox.getSelectedItem().toString());
      System.exit(0);
   }
   
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton convertButton;
   private javax.swing.JComboBox converterComboBox;
   private javax.swing.JButton exitButton;
   private javax.swing.JButton inputBrowseButton;
   private javax.swing.JTextField inputTextField;
   private javax.swing.JButton outputBrowseButton;
   private javax.swing.JTextField outputTextField;
   // End of variables declaration//GEN-END:variables
   
   
   private static class CompactFileFilter extends FileFilter
   {
      public boolean accept(java.io.File file)
      {
         return file.isDirectory() || file.getName().endsWith(".xml");
      }
      
      public String getDescription()
      {
         return "Compact Geometry Description (*.xml)";
      }
   }
}
